package me.ninjoh.ninconsole;


import org.apache.commons.codec.digest.DigestUtils;
import org.json.JSONObject;

import java.io.*;
import java.net.ConnectException;
import java.net.Socket;
import java.net.URLEncoder;

public class JSONAPI
{
    private String host;
    private int port;

    private String username;
    private String password;
    private String salt;


    private Socket socket;
    private PrintWriter out;
    private BufferedReader in;


    public JSONAPI(String host, int port, String username, String password, String salt)  throws IOException
    {
        try
        {
            this.host = host;
            this.port = port;
            this.username = username;
            this.password = password;
            this.salt = salt;

            socket = new Socket(this.getHost(), this.getPort()+1);

            // out stream
            this.out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket
                    .getOutputStream())), true);

            // in stream
            this.in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        }
        catch (ConnectException e)
        {
            System.err.println("Error: " + e.getMessage());
            System.exit(-1);
        }
    }


    public String getUsername()
    {
        return this.username;
    }


    public String getPassword()
    {
        return this.password;
    }


    public String getHost()
    {
        return this.host;
    }


    public int getPort()
    {
        return this.port;
    }


    public String getKey(String method)
    {
        return DigestUtils.sha256Hex(username + method + password);
    }


    public boolean reConnect()
    {
        try
        {
            this.socket.close();
            socket = new Socket(this.getHost(), this.getPort()+1);

            // out stream
            this.out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket
                    .getOutputStream())), true);

            // in stream
            this.in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            this.subscribe("console", false);
            this.subscribe("chat", false);
        }
        catch(ConnectException ignored)
        {
            return false;
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        return true;
    }


    public void subscribe(String source, boolean showPrevious)
    {
        JSONObject object = new JSONObject();
        // name = source
        object.put("name", source);


        // key is generated by the JSONAPI class
        object.put("key", this.getKey(source));


        // username is needed
        object.put("username", this.getUsername());


        // tag to track subscriptions, this should be generated so we can keep track of handlers etc.
        object.put("tag", source);


        // whether to receive the past 150 messages
        object.put("show_previous", showPrevious);




        // the string that should be written to the JSONAPI
        // this subscribes to the stream in JSONAPI
        String outString = null;
        try
        {
            outString = "/api/2/subscribe?json=" + URLEncoder.encode(object.toString(), "UTF-8");
        }
        catch (UnsupportedEncodingException e)
        {
            e.printStackTrace();
        }

        // print (send) it to the JSONAPI
        out.println(outString);
    }


    public PrintWriter out()
    {
        return this.out;
    }


    public BufferedReader in()
    {
        return this.in;
    }


    public boolean isClosed()
    {
        return this.socket.isClosed();
    }
}
